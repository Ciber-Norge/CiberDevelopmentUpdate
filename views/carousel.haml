!!!
%html
  %head
    %title
      Hammer.js
    -#%link{:href => "http://netdna.bootstrapcdn.com/twitter-bootstrap/2.2.2/css/bootstrap-combined.min.css", :rel => "stylesheet"}
    = haml :"templates/header_imports"
    %meta{:content => "user-scalable=no, width=device-width, initial-scale=1, maximum-scale=1", :name => "viewport"}
    :css
      html, body {
        min-height: 100%;
        height: 100%;
        padding: 0;
        margin: 0;
        position: relative
      }
  %body
    = haml :"templates/nav"
    #carousel
      %ul
        %li.pane1
          Track Felles |
          - get_track("Felles")["program"].each do | key, value |
            =haml :"templates/track_spot", :locals => {:key => key, :value => value}
        %li.pane2
          Track 1 | 
          - get_track("1")["program"].each do | key, value |
            =haml :"templates/track_spot", :locals => {:key => key, :value => value}
        %li.pane3
          Track 2 | 
          - get_track("2")["program"].each do | key, value |
            =haml :"templates/track_spot", :locals => {:key => key, :value => value}
        %li.pane4
        %li.pane5
          %h2 Dit is het einde!

    :javascript
      $(document).ready(function() {
        $(".toggleDescription").click(function() {
          $(this).nextAll('.slideDescription').first().slideToggle();
        });
        $(".toggleComment").click(function() {
          $(this).nextAll('.slideComment').first().slideToggle();
        });
      });
    / jQuery is just for the demo! Hammer.js works without jQuery :-)
    %script{:src => "//code.jquery.com/jquery-1.11.0.min.js"}
    %script{:src => "/js/modernizr.js"}
    %script{:src => "/js/hammer.min.js"}
    :javascript
      /**
      * super simple carousel
      * animation between panes happens with css transitions
      */
      function Carousel(element)
      {
          var self = this;
          element = $(element);

          var container = $(">ul", element);
          var panes = $(">ul>li", element);

          var pane_width = 0;
          var pane_count = panes.length;

          var current_pane = 0;


          /**
           * initial
           */
          this.init = function() {
              setPaneDimensions();

              $(window).on("load resize orientationchange", function() {
                  setPaneDimensions();
              })
          };


          /**
           * set the pane dimensions and scale the container
           */
          function setPaneDimensions() {
              pane_width = element.width();
              panes.each(function() {
                  $(this).width(pane_width);
              });
              container.width(pane_width*pane_count);
          };


          /**
           * show pane by index
           */
          this.showPane = function(index, animate) {
              // between the bounds
              index = Math.max(0, Math.min(index, pane_count-1));
              current_pane = index;

              var offset = -((100/pane_count)*current_pane);
              setContainerOffset(offset, animate);
          };


          function setContainerOffset(percent, animate) {
              container.removeClass("animate");

              if(animate) {
                  container.addClass("animate");
              }

              if(Modernizr.csstransforms3d) {
                  container.css("transform", "translate3d("+ percent +"%,0,0) scale3d(1,1,1)");
              }
              else if(Modernizr.csstransforms) {
                  container.css("transform", "translate("+ percent +"%,0)");
              }
              else {
                  var px = ((pane_width*pane_count) / 100) * percent;
                  container.css("left", px+"px");
              }
          }

          this.next = function() { return this.showPane(current_pane+1, true); };
          this.prev = function() { return this.showPane(current_pane-1, true); };


          function handleHammer(ev) {
              // disable browser scrolling
              ev.gesture.preventDefault();

              switch(ev.type) {
                  case 'dragright':
                  case 'dragleft':
                      // stick to the finger
                      var pane_offset = -(100/pane_count)*current_pane;
                      var drag_offset = ((100/pane_width)*ev.gesture.deltaX) / pane_count;

                      // slow down at the first and last pane
                      if((current_pane == 0 && ev.gesture.direction == "right") ||
                          (current_pane == pane_count-1 && ev.gesture.direction == "left")) {
                          drag_offset *= .4;
                      }

                      setContainerOffset(drag_offset + pane_offset);
                      break;

                  case 'swipeleft':
                      self.next();
                      ev.gesture.stopDetect();
                      break;

                  case 'swiperight':
                      self.prev();
                      ev.gesture.stopDetect();
                      break;

                  case 'release':
                      // more then 50% moved, navigate
                      if(Math.abs(ev.gesture.deltaX) > pane_width/2) {
                          if(ev.gesture.direction == 'right') {
                              self.prev();
                          } else {
                              self.next();
                          }
                      }
                      else {
                          self.showPane(current_pane, true);
                      }
                      break;
              }
          }

          new Hammer(element[0], { dragLockToAxis: true }).on("release dragleft dragright swipeleft swiperight", handleHammer);
      }

      var carousel = new Carousel("#carousel");
      carousel.init();

    %script{:src => "/js/ga.js"}